{"version":3,"sources":["context/appContext.js","context/appReducer.js","context/AppState.js","components/reusable/CountryItem.js","config/media.js","components/content/GlobalList.js","components/content/CountrySearch.js","components/content/SearchedCountry.js","components/CovidDataSearch.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","state","type","payload","summaryData","showGlobalList","countrySearch","AppState","props","useReducer","appReducer","dispatch","onDataSummary","fetch","method","redirect","then","response","a","json","res","catch","error","console","log","useEffect","Provider","value","addComma","num","toString","replace","onAllCountriesToggle","handleCountrySearch","name","children","CountryItem","country","countryCode","totalConfirmed","totalRecovered","totalDeaths","useContext","percent","total","casesLeadingToRecoveries","toFixed","casesLeadingToDeath","Segment","inverted","style","marginBottom","Label","size","attached","display","flexDirection","justifyContent","alignItems","fontSize","color","src","height","Statistic","Group","horizontal","Value","icon","content","AppMedia","createMedia","breakpoints","mobile","tablet","computer","largeScreen","widescreen","Media","createMediaStyle","MediaContextProvider","correctedNames","GlobalList","useState","countriesSwitch","setCountriesSwitch","countries","Countries","RenderedCountries","sort","b","TotalConfirmed","map","i","k","Grid","Column","key","Country","CountryCode","toLowerCase","TotalRecovered","TotalDeaths","Button","id","toggle","active","onClick","as","at","Row","centered","columns","greaterThanOrEqual","CountrySearch","countryNames","setCountryNames","searchTerms","setSearchTerms","slugNames","Slug","Header","Input","action","placeholder","list","onChange","e","target","SearchedCountry","setCountry","searchedCountry","filter","obj","padding","CovidDataSearch","toggleAllCountries","setToggleAllCountries","toggleGlobalStats","setToggleGlobalStats","isDataLoaded","handleClick","prevState","loading","Global","NewConfirmed","NewRecovered","NewDeaths","className","Date","parse","textAlign","floated","href","rel","window","close","backgroundColor","maxHeight","overflowY","paddingTop","greaterThan","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fedaf3b4.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst AppContext = createContext();\r\n\r\nexport default AppContext;\r\n","export default (state, { type, payload }) => {\r\n  switch (type) {\r\n    case \"LOAD_COVID19_COUNTRY_DATA\":\r\n      return {\r\n        ...state,\r\n        summaryData: payload,\r\n      };\r\n\r\n    case \"TOGGLE_ALL_COUNTRIES\":\r\n      return {\r\n        ...state,\r\n        showGlobalList: !state.showGlobalList,\r\n      };\r\n\r\n    case \"UPDATE_COUNTRY_SEARCH\":\r\n      return {\r\n        ...state,\r\n        showGlobalList: false,\r\n        countrySearch: payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useReducer, useEffect } from \"react\";\r\nimport AppContext from \"./appContext\";\r\nimport appReducer from \"./appReducer\";\r\n\r\nconst AppState = (props) => {\r\n  const initialState = {\r\n    summaryData: null,\r\n    showGlobalList: false,\r\n    countrySearch: null,\r\n  };\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n  const { summaryData } = state;\r\n\r\n  const onDataSummary = () => {\r\n    fetch(\"https://api.covid19api.com/summary\", {\r\n      method: \"GET\",\r\n      redirect: \"follow\",\r\n    })\r\n      .then(async (response) => {\r\n        let res = await response.json();\r\n        dispatch({ type: \"LOAD_COVID19_COUNTRY_DATA\", payload: res });\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!summaryData) {\r\n      onDataSummary();\r\n    }\r\n  }, [summaryData]);\r\n\r\n  const onAllCountriesToggle = () => dispatch({ type: \"TOGGLE_ALL_COUNTRIES\" });\r\n\r\n  const handleCountrySearch = (name) =>\r\n    dispatch({ type: \"UPDATE_COUNTRY_SEARCH\", payload: name });\r\n\r\n  const addComma = (num) =>\r\n    num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        summaryData: state.summaryData,\r\n        showGlobalList: state.showGlobalList,\r\n        countrySearch: state.countrySearch,\r\n        addComma,\r\n        onDataSummary,\r\n        onAllCountriesToggle,\r\n        handleCountrySearch,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\nexport default AppState;\r\n","import React, { useContext } from \"react\";\r\nimport { Header, Label, Segment, Statistic } from \"semantic-ui-react\";\r\nimport AppContext from \"../../context/appContext\";\r\n\r\nconst CountryItem = ({\r\n  country,\r\n  countryCode,\r\n  totalConfirmed,\r\n  totalRecovered,\r\n  totalDeaths,\r\n}) => {\r\n  const state = useContext(AppContext);\r\n  const { addComma } = state;\r\n  const percent = (value, total) => (value / total) * 100;\r\n\r\n  const casesLeadingToRecoveries = percent(\r\n    totalRecovered,\r\n    totalConfirmed\r\n  ).toFixed(2);\r\n\r\n  const casesLeadingToDeath = percent(totalDeaths, totalConfirmed).toFixed(2);\r\n\r\n  return (\r\n    <Segment inverted style={{ marginBottom: 15 }}>\r\n      <Label size=\"big\" attached=\"top\">\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"space-between\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div style={{}}>\r\n            <p style={{ fontSize: 20, color: \"black\" }}>{country}</p>\r\n          </div>\r\n\r\n          <div style={{}}>\r\n            {\r\n              <img\r\n                src={`https://www.countryflags.io/${countryCode}/shiny/32.png`}\r\n              />\r\n            }\r\n          </div>\r\n        </div>\r\n      </Label>\r\n      <div style={{ height: \"3vh\" }} />\r\n      <Segment>\r\n        <Statistic.Group size=\"small\" horizontal>\r\n          <Statistic>\r\n            <Statistic.Value>{addComma(totalConfirmed)}</Statistic.Value>\r\n            <Statistic.Label>Total Confirmed</Statistic.Label>\r\n          </Statistic>\r\n          <Statistic color=\"green\">\r\n            <Statistic.Value>{addComma(totalRecovered)}</Statistic.Value>\r\n            <Statistic.Label>Total Recovered</Statistic.Label>\r\n          </Statistic>\r\n          <Statistic color=\"red\">\r\n            <Statistic.Value>{addComma(totalDeaths)}</Statistic.Value>\r\n            <Statistic.Label>Total Deaths</Statistic.Label>\r\n          </Statistic>\r\n        </Statistic.Group>\r\n        <Label\r\n          color=\"green\"\r\n          icon=\"heart\"\r\n          size=\"tiny\"\r\n          attached=\"top right\"\r\n          content={casesLeadingToRecoveries + \"%\"}\r\n        />\r\n        <Label\r\n          color=\"red\"\r\n          size=\"tiny\"\r\n          attached=\"bottom right\"\r\n          content={casesLeadingToDeath + \"%\"}\r\n        />\r\n      </Segment>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default CountryItem;\r\n","import { createMedia } from \"@artsy/fresnel\";\r\n\r\nconst AppMedia = createMedia({\r\n  breakpoints: {\r\n    mobile: 320,\r\n    tablet: 768,\r\n    computer: 992,\r\n    largeScreen: 1400,\r\n    widescreen: 1920,\r\n  },\r\n});\r\n\r\n// Generate CSS to be injected into the head\r\nexport const mediaStyles = AppMedia.createMediaStyle();\r\nexport const { Media, MediaContextProvider } = AppMedia;\r\n","import React, { useContext, useState } from \"react\";\r\nimport AppContext from \"../../context/appContext\";\r\nimport { Grid, Label, Button } from \"semantic-ui-react\";\r\nimport CounrtyItem from \"../reusable/CountryItem\";\r\nimport { Media } from \"../../config/media\";\r\n\r\nconst GlobalList = () => {\r\n  const state = useContext(AppContext);\r\n  const { summaryData } = state;\r\n  const [countriesSwitch, setCountriesSwitch] = useState(\"a\");\r\n\r\n  const countries = summaryData.Countries;\r\n\r\n  const RenderedCountries = () => {\r\n    switch (countriesSwitch) {\r\n      case \"ascendingConfirmedCases\":\r\n        return countries\r\n          .sort((a, b) => (a.TotalConfirmed < b.TotalConfirmed ? 1 : -1))\r\n          .map((i, k) => {\r\n            return (\r\n              <Grid.Column key={k}>\r\n                <CounrtyItem\r\n                  country={correctedNames(i.Country)}\r\n                  countryCode={i.CountryCode.toLowerCase()}\r\n                  totalConfirmed={i.TotalConfirmed}\r\n                  totalRecovered={i.TotalRecovered}\r\n                  totalDeaths={i.TotalDeaths}\r\n                />\r\n              </Grid.Column>\r\n            );\r\n          });\r\n      case \"descendingConfirmedCases\":\r\n        return countries\r\n          .sort((a, b) => (a.TotalConfirmed > b.TotalConfirmed ? 1 : -1))\r\n          .map((i, k) => {\r\n            return (\r\n              <Grid.Column key={k}>\r\n                <CounrtyItem\r\n                  country={correctedNames(i.Country)}\r\n                  countryCode={i.CountryCode.toLowerCase()}\r\n                  totalConfirmed={i.TotalConfirmed}\r\n                  totalRecovered={i.TotalRecovered}\r\n                  totalDeaths={i.TotalDeaths}\r\n                />\r\n              </Grid.Column>\r\n            );\r\n          });\r\n      case \"ascendingRecoveredCases\":\r\n        return countries\r\n          .sort((a, b) => (a.TotalRecovered < b.TotalRecovered ? 1 : -1))\r\n          .map((i, k) => {\r\n            return (\r\n              <Grid.Column key={k}>\r\n                <CounrtyItem\r\n                  country={correctedNames(i.Country)}\r\n                  countryCode={i.CountryCode.toLowerCase()}\r\n                  totalConfirmed={i.TotalConfirmed}\r\n                  totalRecovered={i.TotalRecovered}\r\n                  totalDeaths={i.TotalDeaths}\r\n                />\r\n              </Grid.Column>\r\n            );\r\n          });\r\n      case \"descendingRecoveredCases\":\r\n        return countries\r\n          .sort((a, b) => (a.TotalRecovered > b.TotalRecovered ? 1 : -1))\r\n          .map((i, k) => {\r\n            return (\r\n              <Grid.Column key={k}>\r\n                <CounrtyItem\r\n                  country={correctedNames(i.Country)}\r\n                  countryCode={i.CountryCode.toLowerCase()}\r\n                  totalConfirmed={i.TotalConfirmed}\r\n                  totalRecovered={i.TotalRecovered}\r\n                  totalDeaths={i.TotalDeaths}\r\n                />\r\n              </Grid.Column>\r\n            );\r\n          });\r\n      case \"ascendingDeathsCases\":\r\n        return countries\r\n          .sort((a, b) => (a.TotalDeaths < b.TotalDeaths ? 1 : -1))\r\n          .map((i, k) => {\r\n            return (\r\n              <Grid.Column key={k}>\r\n                <CounrtyItem\r\n                  country={correctedNames(i.Country)}\r\n                  countryCode={i.CountryCode.toLowerCase()}\r\n                  totalConfirmed={i.TotalConfirmed}\r\n                  totalRecovered={i.TotalRecovered}\r\n                  totalDeaths={i.TotalDeaths}\r\n                />\r\n              </Grid.Column>\r\n            );\r\n          });\r\n      case \"descendingDeathsCases\":\r\n        return countries\r\n          .sort((a, b) => (a.TotalDeaths > b.TotalDeaths ? 1 : -1))\r\n          .map((i, k) => {\r\n            return (\r\n              <Grid.Column key={k}>\r\n                <CounrtyItem\r\n                  country={correctedNames(i.Country)}\r\n                  countryCode={i.CountryCode.toLowerCase()}\r\n                  totalConfirmed={i.TotalConfirmed}\r\n                  totalRecovered={i.TotalRecovered}\r\n                  totalDeaths={i.TotalDeaths}\r\n                />\r\n              </Grid.Column>\r\n            );\r\n          });\r\n      default:\r\n        return countries.map((i, k) => {\r\n          return (\r\n            <Grid.Column key={k}>\r\n              <CounrtyItem\r\n                country={correctedNames(i.Country)}\r\n                countryCode={i.CountryCode.toLowerCase()}\r\n                totalConfirmed={i.TotalConfirmed}\r\n                totalRecovered={i.TotalRecovered}\r\n                totalDeaths={i.TotalDeaths}\r\n              />\r\n            </Grid.Column>\r\n          );\r\n        });\r\n    }\r\n  };\r\n\r\n  const reorderConfirmedCases = () =>\r\n    countriesSwitch !== \"ascendingConfirmedCases\"\r\n      ? setCountriesSwitch(\"ascendingConfirmedCases\")\r\n      : countriesSwitch === \"ascendingConfirmedCases\"\r\n      ? setCountriesSwitch(\"descendingConfirmedCases\")\r\n      : countriesSwitch === \"descendingConfirmedCases\"\r\n      ? setCountriesSwitch(\"ascendingConfirmedCases\")\r\n      : null;\r\n\r\n  const reorderRecoveredCases = () =>\r\n    countriesSwitch !== \"ascendingRecoveredCases\"\r\n      ? setCountriesSwitch(\"ascendingRecoveredCases\")\r\n      : countriesSwitch === \"ascendingRecoveredCases\"\r\n      ? setCountriesSwitch(\"descendingRecoveredCases\")\r\n      : countriesSwitch === \"descendingRecoveredCases\"\r\n      ? setCountriesSwitch(\"ascendingRecoveredCases\")\r\n      : null;\r\n\r\n  const reorderDeathsCases = () =>\r\n    countriesSwitch !== \"ascendingDeathsCases\"\r\n      ? setCountriesSwitch(\"ascendingDeathsCases\")\r\n      : countriesSwitch === \"ascendingDeathsCases\"\r\n      ? setCountriesSwitch(\"descendingDeathsCases\")\r\n      : countriesSwitch === \"descendingDeathsCases\"\r\n      ? setCountriesSwitch(\"ascendingDeathsCases\")\r\n      : null;\r\n\r\n  return (\r\n    <div>\r\n      <Label color=\"black\" attached=\"top left\">\r\n        <Button\r\n          id=\"buttonToggle\"\r\n          toggle\r\n          active={countriesSwitch === \"ascendingConfirmedCases\" ? true : false}\r\n          onClick={() => reorderConfirmedCases()}\r\n          content=\"Toggle Confirmed Cases\"\r\n        />\r\n        <Button\r\n          id=\"buttonToggle\"\r\n          toggle\r\n          active={countriesSwitch === \"ascendingRecoveredCases\" ? true : false}\r\n          onClick={() => reorderRecoveredCases()}\r\n          content=\"Toggle Recovered\"\r\n        />\r\n        <Button\r\n          id=\"buttonToggle\"\r\n          toggle\r\n          active={countriesSwitch === \"ascendingDeathsCases\" ? true : false}\r\n          onClick={() => reorderDeathsCases()}\r\n          content=\"Toggle Casualties\"\r\n        />\r\n      </Label>\r\n      <Grid as={Media} at=\"mobile\">\r\n        <Grid.Row centered columns={1}>\r\n          <RenderedCountries />\r\n        </Grid.Row>\r\n      </Grid>\r\n\r\n      <Grid as={Media} at=\"tablet\">\r\n        <Grid.Row centered columns={2}>\r\n          <RenderedCountries />\r\n        </Grid.Row>\r\n      </Grid>\r\n\r\n      <Grid as={Media} at=\"computer\">\r\n        <Grid.Row centered columns={3}>\r\n          <RenderedCountries />\r\n        </Grid.Row>\r\n      </Grid>\r\n      <Grid as={Media} at=\"largeScreen\">\r\n        <Grid.Row centered columns={4}>\r\n          <RenderedCountries />\r\n        </Grid.Row>\r\n      </Grid>\r\n\r\n      <Grid as={Media} greaterThanOrEqual=\"widescreen\">\r\n        <Grid.Row centered columns={6}>\r\n          <RenderedCountries />\r\n        </Grid.Row>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst correctedNames = (name) =>\r\n  name === \"Taiwan, Republic of China\"\r\n    ? \"Taiwan\"\r\n    : name === \"Taiwan, Republic of China\"\r\n    ? \"Taiwan\"\r\n    : name === \"Tanzania, United Republic of\"\r\n    ? \"Tanzania\"\r\n    : name === \"Iran, Islamic Republic of\"\r\n    ? \"Iran\"\r\n    : name === \"Holy See (Vatican City State)\"\r\n    ? \"Vatican City\"\r\n    : name === \"Brunei Darussalam\"\r\n    ? \"Brunei\"\r\n    : name === \"Venezuela (Bolivarian Republic)\"\r\n    ? \"Venezuela\"\r\n    : name === \"Viet Nam\"\r\n    ? \"Vietnam\"\r\n    : name === \"Macedonia, Republic of\"\r\n    ? \"North Macedonia\"\r\n    : name;\r\n\r\nexport default GlobalList;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Header, Input, Button } from \"semantic-ui-react\";\r\nimport AppContext from \"../../context/appContext\";\r\n\r\nconst CountrySearch = () => {\r\n  const state = useContext(AppContext);\r\n  const { summaryData, handleCountrySearch } = state;\r\n  const [countryNames, setCountryNames] = useState(null);\r\n  const [searchTerms, setSearchTerms] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (!countryNames) {\r\n      const slugNames = summaryData.Countries.map((i) => i.Slug);\r\n      setCountryNames(slugNames);\r\n    }\r\n  }, [summaryData, countryNames]);\r\n\r\n  return (\r\n    countryNames && (\r\n      <Header>\r\n        <Input id=\"NoDrag\" action placeholder=\"Country Search...\">\r\n          <input\r\n            id=\"NoDrag\"\r\n            type=\"text\"\r\n            list=\"countries\"\r\n            onChange={(e) => setSearchTerms(e.target.value)}\r\n          />\r\n          <Button\r\n            id=\"NoDrag\"\r\n            type=\"submit\"\r\n            onClick={() => handleCountrySearch(searchTerms)}\r\n          >\r\n            Search\r\n          </Button>\r\n        </Input>\r\n        <datalist id=\"countries\">\r\n          {countryNames.map((i, k) => (\r\n            <option key={k} value={`${i}`}>\r\n              {i}\r\n            </option>\r\n          ))}\r\n        </datalist>\r\n      </Header>\r\n    )\r\n  );\r\n};\r\n\r\nexport default CountrySearch;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport AppContext from \"../../context/appContext\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport CounrtyItem from \"../reusable/CountryItem\";\r\n\r\nconst SearchedCountry = () => {\r\n  const state = useContext(AppContext);\r\n  const { summaryData, countrySearch } = state;\r\n  const [country, setCountry] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (countrySearch) {\r\n      const searchedCountry = summaryData.Countries.filter((obj) => {\r\n        return obj.Slug === countrySearch;\r\n      });\r\n      setCountry(searchedCountry[0]);\r\n    }\r\n  }, [countrySearch, summaryData.Countries]);\r\n\r\n  return country ? (\r\n    <Grid centered style={{ padding: 10 }}>\r\n      <Grid.Column>\r\n        <CounrtyItem\r\n          country={correctedNames(country.Country)}\r\n          countryCode={country.CountryCode.toLowerCase()}\r\n          totalConfirmed={country.TotalConfirmed}\r\n          totalRecovered={country.TotalRecovered}\r\n          totalDeaths={country.TotalDeaths}\r\n        />\r\n      </Grid.Column>\r\n    </Grid>\r\n  ) : null;\r\n};\r\n\r\nconst correctedNames = (name) =>\r\n  name === \"Taiwan, Republic of China\"\r\n    ? \"Taiwan\"\r\n    : name === \"Taiwan, Republic of China\"\r\n    ? \"Taiwan\"\r\n    : name === \"Tanzania, United Republic of\"\r\n    ? \"Tanzania\"\r\n    : name === \"Iran, Islamic Republic of\"\r\n    ? \"Iran\"\r\n    : name === \"Holy See (Vatican City State)\"\r\n    ? \"Vatican City\"\r\n    : name === \"Brunei Darussalam\"\r\n    ? \"Brunei\"\r\n    : name === \"Venezuela (Bolivarian Republic)\"\r\n    ? \"Venezuela\"\r\n    : name === \"Viet Nam\"\r\n    ? \"Vietnam\"\r\n    : name === \"Macedonia, Republic of\"\r\n    ? \"North Macedonia\"\r\n    : name;\r\n\r\nexport default SearchedCountry;\r\n","import React, { useContext, useState } from \"react\";\r\nimport AppContext from \"../context/appContext\";\r\nimport { Header, Segment, Label, Button } from \"semantic-ui-react\";\r\nimport GlobalList from \"./content/GlobalList\";\r\nimport CountrySearch from \"./content/CountrySearch\";\r\nimport SearchedCountry from \"./content/SearchedCountry\";\r\nimport { Media } from \"../config/media\";\r\n\r\nconst CovidDataSearch = () => {\r\n  const state = useContext(AppContext);\r\n  const {\r\n    summaryData,\r\n    showGlobalList,\r\n    onAllCountriesToggle,\r\n    countrySearch,\r\n    addComma,\r\n  } = state;\r\n  const [toggleAllCountries, setToggleAllCountries] = useState(false);\r\n  const [toggleGlobalStats, setToggleGlobalStats] = useState(true);\r\n\r\n  const isDataLoaded = () => (summaryData ? false : true);\r\n\r\n  const handleClick = () => {\r\n    setToggleAllCountries((prevState) => !prevState);\r\n    onAllCountriesToggle();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Media at=\"mobile\">\r\n        <div style={{ padding: 10 }}>\r\n          <Segment id=\"Drag\" color=\"brown\" inverted loading={isDataLoaded()}>\r\n            {summaryData && (\r\n              <>\r\n                {toggleGlobalStats ? (\r\n                  <Label\r\n                    id=\"NoDrag\"\r\n                    as=\"a\"\r\n                    color=\"black\"\r\n                    attached=\"top\"\r\n                    onClick={() => setToggleGlobalStats(!toggleGlobalStats)}\r\n                  >\r\n                    {`Latest 🌎 Stats: Confirmed Cases: ${addComma(\r\n                      summaryData.Global.NewConfirmed\r\n                    )} | Recovered Cases: ${addComma(\r\n                      summaryData.Global.NewRecovered\r\n                    )} | Reported Casualties: ${addComma(\r\n                      summaryData.Global.NewDeaths\r\n                    )}`}\r\n                  </Label>\r\n                ) : (\r\n                  <Label\r\n                    id=\"NoDrag\"\r\n                    as=\"a\"\r\n                    color=\"red\"\r\n                    attached=\"top\"\r\n                    onClick={() => setToggleGlobalStats(!toggleGlobalStats)}\r\n                  >\r\n                    {`🌎 Confirmed Cases: ${addComma(\r\n                      summaryData.Global.TotalConfirmed\r\n                    )} | 🌎 Recovered Cases: ${addComma(\r\n                      summaryData.Global.TotalRecovered\r\n                    )} | 🌎 Reported Casualties: ${addComma(\r\n                      summaryData.Global.TotalDeaths\r\n                    )}`}\r\n                  </Label>\r\n                )}\r\n\r\n                <Label className=\"TimeLabel\" color=\"black\" attached=\"bottom\">\r\n                  {`Date of Reported Data: ${new Date(\r\n                    Date.parse(summaryData.Date)\r\n                  )}`}\r\n                </Label>\r\n              </>\r\n            )}\r\n            <Header as=\"h3\" textAlign=\"right\">\r\n              <Button.Group id=\"NoDrag\" floated=\"right\">\r\n                <Button\r\n                  as={\"a\"}\r\n                  href=\"https://github.com/AhmedAlihashi/covid-19-tracker\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  content=\"Click here for the repository\"\r\n                />\r\n                <Button\r\n                  icon=\"power off\"\r\n                  color=\"red\"\r\n                  onClick={() => {\r\n                    window.close();\r\n                  }}\r\n                />\r\n              </Button.Group>\r\n            </Header>\r\n            <Header style={{ fontSize: \"3em\" }}>\r\n              Global Covid-19 Statistics\r\n            </Header>\r\n\r\n            {summaryData && (\r\n              <>\r\n                <CountrySearch />\r\n\r\n                <Button\r\n                  id=\"allCountriesButton\"\r\n                  toggle\r\n                  active={toggleAllCountries}\r\n                  onClick={() => handleClick()}\r\n                  style={{ marginBottom: toggleAllCountries ? 0 : 30 }}\r\n                >\r\n                  All Countries\r\n                </Button>\r\n\r\n                {!showGlobalList && countrySearch && (\r\n                  <Segment\r\n                    style={{\r\n                      backgroundColor: \"#90BEC8\",\r\n                      marginBottom: 50,\r\n                    }}\r\n                  >\r\n                    <SearchedCountry />\r\n                  </Segment>\r\n                )}\r\n\r\n                {showGlobalList ? (\r\n                  <Segment\r\n                    id=\"NoDrag\"\r\n                    style={{\r\n                      marginBottom: 20,\r\n                      backgroundColor: \"#90BEC8\",\r\n                      maxHeight: \"55vh\",\r\n                      overflowY: \"scroll\",\r\n                    }}\r\n                  >\r\n                    <GlobalList />\r\n                  </Segment>\r\n                ) : null}\r\n              </>\r\n            )}\r\n          </Segment>\r\n        </div>\r\n      </Media>\r\n      <Media at=\"tablet\">\r\n        <div style={{ padding: 10 }}>\r\n          <Segment id=\"Drag\" color=\"brown\" inverted loading={isDataLoaded()}>\r\n            {summaryData && (\r\n              <>\r\n                {toggleGlobalStats ? (\r\n                  <Label\r\n                    id=\"NoDrag\"\r\n                    as=\"a\"\r\n                    color=\"black\"\r\n                    size=\"large\"\r\n                    attached=\"top\"\r\n                    onClick={() => setToggleGlobalStats(!toggleGlobalStats)}\r\n                  >\r\n                    {`Latest 🌎 Stats: Confirmed Cases: ${addComma(\r\n                      summaryData.Global.NewConfirmed\r\n                    )} | Recovered Cases: ${addComma(\r\n                      summaryData.Global.NewRecovered\r\n                    )} | Reported Casualties: ${addComma(\r\n                      summaryData.Global.NewDeaths\r\n                    )}`}\r\n                  </Label>\r\n                ) : (\r\n                  <Label\r\n                    id=\"NoDrag\"\r\n                    as=\"a\"\r\n                    color=\"red\"\r\n                    size=\"large\"\r\n                    attached=\"top\"\r\n                    onClick={() => setToggleGlobalStats(!toggleGlobalStats)}\r\n                  >\r\n                    {`🌎 Confirmed Cases: ${addComma(\r\n                      summaryData.Global.TotalConfirmed\r\n                    )} | 🌎 Recovered Cases: ${addComma(\r\n                      summaryData.Global.TotalRecovered\r\n                    )} | 🌎 Reported Casualties: ${addComma(\r\n                      summaryData.Global.TotalDeaths\r\n                    )}`}\r\n                  </Label>\r\n                )}\r\n\r\n                <Label\r\n                  className=\"TimeLabel\"\r\n                  color=\"black\"\r\n                  attached=\"bottom right\"\r\n                >\r\n                  {`Date of Reported Data: ${new Date(\r\n                    Date.parse(summaryData.Date)\r\n                  )}`}\r\n                </Label>\r\n              </>\r\n            )}\r\n            <Header as=\"h3\" textAlign=\"right\">\r\n              <Button.Group id=\"NoDrag\" floated=\"right\">\r\n                <Button\r\n                  as={\"a\"}\r\n                  href=\"https://github.com/AhmedAlihashi/covid-19-tracker\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  content=\"Click here for the repository\"\r\n                />\r\n                <Button\r\n                  icon=\"power off\"\r\n                  color=\"red\"\r\n                  onClick={() => {\r\n                    window.close();\r\n                  }}\r\n                />\r\n              </Button.Group>\r\n            </Header>\r\n            <Header style={{ fontSize: \"5em\" }}>\r\n              Global Covid-19 Statistics\r\n            </Header>\r\n            {summaryData && (\r\n              <>\r\n                <CountrySearch />\r\n\r\n                <Button\r\n                  id=\"allCountriesButton\"\r\n                  toggle\r\n                  active={toggleAllCountries}\r\n                  onClick={() => handleClick()}\r\n                >\r\n                  All Countries\r\n                </Button>\r\n\r\n                {!showGlobalList && countrySearch && (\r\n                  <Segment\r\n                    style={{\r\n                      backgroundColor: \"#90BEC8\",\r\n                      marginBottom: 50,\r\n                    }}\r\n                  >\r\n                    <SearchedCountry />\r\n                  </Segment>\r\n                )}\r\n\r\n                {showGlobalList ? (\r\n                  <Segment\r\n                    id=\"NoDrag\"\r\n                    style={{\r\n                      marginBottom: 20,\r\n                      backgroundColor: \"#90BEC8\",\r\n                      maxHeight: \"47vh\",\r\n                      overflowY: \"scroll\",\r\n                    }}\r\n                  >\r\n                    <GlobalList />\r\n                  </Segment>\r\n                ) : null}\r\n              </>\r\n            )}\r\n          </Segment>\r\n        </div>\r\n      </Media>\r\n      <Media at=\"computer\">\r\n        <div style={{ padding: 10 }}>\r\n          <Segment\r\n            id=\"Drag\"\r\n            color=\"brown\"\r\n            inverted\r\n            loading={isDataLoaded()}\r\n            style={{ paddingTop: 30 }}\r\n          >\r\n            {summaryData && (\r\n              <>\r\n                {toggleGlobalStats ? (\r\n                  <Label\r\n                    id=\"NoDrag\"\r\n                    as=\"a\"\r\n                    color=\"black\"\r\n                    size=\"big\"\r\n                    attached=\"top\"\r\n                    onClick={() => setToggleGlobalStats(!toggleGlobalStats)}\r\n                  >\r\n                    {`Latest 🌎 Stats: Confirmed Cases: ${addComma(\r\n                      summaryData.Global.NewConfirmed\r\n                    )} | Recovered Cases: ${addComma(\r\n                      summaryData.Global.NewRecovered\r\n                    )} | Reported Casualties: ${addComma(\r\n                      summaryData.Global.NewDeaths\r\n                    )}`}\r\n                  </Label>\r\n                ) : (\r\n                  <Label\r\n                    id=\"NoDrag\"\r\n                    as=\"a\"\r\n                    color=\"red\"\r\n                    size=\"big\"\r\n                    attached=\"top\"\r\n                    onClick={() => setToggleGlobalStats(!toggleGlobalStats)}\r\n                  >\r\n                    {`🌎\r\n Confirmed Cases: ${addComma(\r\n   summaryData.Global.TotalConfirmed\r\n )} | 🌎 Recovered Cases: ${addComma(\r\n                      summaryData.Global.TotalRecovered\r\n                    )} | 🌎 Reported Casualties: ${addComma(\r\n                      summaryData.Global.TotalDeaths\r\n                    )}`}\r\n                  </Label>\r\n                )}\r\n\r\n                <Label\r\n                  className=\"TimeLabel\"\r\n                  color=\"black\"\r\n                  attached=\"bottom right\"\r\n                >\r\n                  {`Date of Reported Data: ${new Date(\r\n                    Date.parse(summaryData.Date)\r\n                  )}`}\r\n                </Label>\r\n              </>\r\n            )}\r\n            <Header as=\"h3\" textAlign=\"right\">\r\n              <Button.Group id=\"NoDrag\" floated=\"right\">\r\n                <Button\r\n                  as={\"a\"}\r\n                  href=\"https://github.com/AhmedAlihashi/covid-19-tracker\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  content=\"Click here for the repository\"\r\n                />\r\n                <Button\r\n                  icon=\"power off\"\r\n                  color=\"red\"\r\n                  onClick={() => {\r\n                    window.close();\r\n                  }}\r\n                />\r\n              </Button.Group>\r\n            </Header>\r\n            <Header style={{ fontSize: \"5em\" }}>\r\n              Global Covid-19 Statistics\r\n            </Header>\r\n            {summaryData && (\r\n              <>\r\n                <CountrySearch />\r\n\r\n                <Button\r\n                  id=\"allCountriesButton\"\r\n                  toggle\r\n                  active={toggleAllCountries}\r\n                  onClick={() => handleClick()}\r\n                >\r\n                  All Countries\r\n                </Button>\r\n\r\n                {!showGlobalList && countrySearch && (\r\n                  <Segment\r\n                    style={{\r\n                      backgroundColor: \"#90BEC8\",\r\n                      marginBottom: 50,\r\n                    }}\r\n                  >\r\n                    <SearchedCountry />\r\n                  </Segment>\r\n                )}\r\n\r\n                {showGlobalList ? (\r\n                  <Segment\r\n                    id=\"NoDrag\"\r\n                    style={{\r\n                      marginBottom: 20,\r\n                      backgroundColor: \"#90BEC8\",\r\n                      maxHeight: \"47vh\",\r\n                      overflowY: \"scroll\",\r\n                    }}\r\n                  >\r\n                    <GlobalList />\r\n                  </Segment>\r\n                ) : null}\r\n              </>\r\n            )}\r\n          </Segment>\r\n        </div>\r\n      </Media>\r\n      <Media greaterThan=\"computer\">\r\n        <div style={{ padding: 10 }}>\r\n          <Segment\r\n            id=\"Drag\"\r\n            style={{ paddingTop: 45 }}\r\n            color=\"brown\"\r\n            inverted\r\n            loading={isDataLoaded()}\r\n          >\r\n            {summaryData && (\r\n              <>\r\n                {toggleGlobalStats ? (\r\n                  <Label\r\n                    id=\"NoDrag\"\r\n                    as=\"a\"\r\n                    color=\"black\"\r\n                    size=\"massive\"\r\n                    attached=\"top\"\r\n                    onClick={() => setToggleGlobalStats(!toggleGlobalStats)}\r\n                  >\r\n                    {`Latest 🌎 Stats: Confirmed Cases: ${addComma(\r\n                      summaryData.Global.NewConfirmed\r\n                    )} | Recovered Cases: ${addComma(\r\n                      summaryData.Global.NewRecovered\r\n                    )} | Reported Casualties: ${addComma(\r\n                      summaryData.Global.NewDeaths\r\n                    )}`}\r\n                  </Label>\r\n                ) : (\r\n                  <Label\r\n                    id=\"NoDrag\"\r\n                    as=\"a\"\r\n                    color=\"red\"\r\n                    size=\"massive\"\r\n                    attached=\"top\"\r\n                    onClick={() => setToggleGlobalStats(!toggleGlobalStats)}\r\n                  >\r\n                    {`🌎\r\n Confirmed Cases: ${addComma(\r\n   summaryData.Global.TotalConfirmed\r\n )} | 🌎 Recovered Cases: ${addComma(\r\n                      summaryData.Global.TotalRecovered\r\n                    )} | 🌎 Reported Casualties: ${addComma(\r\n                      summaryData.Global.TotalDeaths\r\n                    )}`}\r\n                  </Label>\r\n                )}\r\n\r\n                <Label\r\n                  className=\"TimeLabel\"\r\n                  color=\"black\"\r\n                  attached=\"bottom right\"\r\n                >\r\n                  {`Date of Reported Data: ${new Date(\r\n                    Date.parse(summaryData.Date)\r\n                  )}`}\r\n                </Label>\r\n              </>\r\n            )}\r\n            <Header as=\"h3\" textAlign=\"right\">\r\n              <Button.Group id=\"NoDrag\" floated=\"right\">\r\n                <Button\r\n                  as={\"a\"}\r\n                  href=\"https://github.com/AhmedAlihashi/covid-19-tracker\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  content=\"Click here for the repository\"\r\n                />\r\n                <Button\r\n                  icon=\"power off\"\r\n                  color=\"red\"\r\n                  onClick={() => {\r\n                    window.close();\r\n                  }}\r\n                />\r\n              </Button.Group>\r\n            </Header>\r\n            <Header style={{ fontSize: \"5em\" }}>\r\n              Global Covid-19 Statistics\r\n            </Header>\r\n\r\n            {summaryData && (\r\n              <>\r\n                <CountrySearch />\r\n\r\n                <Button\r\n                  id=\"allCountriesButton\"\r\n                  toggle\r\n                  active={toggleAllCountries}\r\n                  onClick={() => handleClick()}\r\n                >\r\n                  All Countries\r\n                </Button>\r\n\r\n                {!showGlobalList && countrySearch && (\r\n                  <Segment\r\n                    style={{\r\n                      backgroundColor: \"#90BEC8\",\r\n                      marginBottom: 50,\r\n                    }}\r\n                  >\r\n                    <SearchedCountry />\r\n                  </Segment>\r\n                )}\r\n\r\n                {showGlobalList ? (\r\n                  <Segment\r\n                    id=\"NoDrag\"\r\n                    style={{\r\n                      marginBottom: 20,\r\n                      backgroundColor: \"#90BEC8\",\r\n                      height: \"56vh\",\r\n                      overflowY: \"scroll\",\r\n                    }}\r\n                  >\r\n                    <GlobalList />\r\n                  </Segment>\r\n                ) : null}\r\n              </>\r\n            )}\r\n          </Segment>\r\n        </div>\r\n      </Media>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CovidDataSearch;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport AppState from \"./context/AppState\";\nimport CovidDataSearch from \"./components/CovidDataSearch.js\";\nimport { MediaContextProvider } from \"./config/media\";\n\nconst App = () => {\n  return (\n    <AppState>\n      <MediaContextProvider>\n        <div className=\"App\">\n          <CovidDataSearch />\n        </div>\n      </MediaContextProvider>\n    </AppState>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}