{"version":3,"sources":["context/appContext.js","context/appReducer.js","context/AppState.js","components/DataList.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","state","type","payload","summaryData","AppState","props","useReducer","appReducer","dispatch","Provider","value","onDataSummary","fetch","method","redirect","then","response","a","json","res","catch","error","console","log","children","DataList","useContext","useEffect","style","padding","Segment","color","className","inverted","loading","Header","fontSize","backgroundColor","Grid","centered","Row","columns","Countries","map","i","k","name","addComma","num","toString","replace","Column","key","marginBottom","Label","size","attached","Country","CountryCode","Flag","toLowerCase","marginLeft","height","Statistic","Group","horizontal","Value","TotalConfirmed","TotalRecovered","TotalDeaths","App","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.23630885.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst AppContext = createContext();\r\n\r\nexport default AppContext;\r\n","export default (state, { type, payload }) => {\r\n  switch (type) {\r\n    case \"LOAD_COVID19_COUNTRY_DATA\":\r\n      return {\r\n        ...state,\r\n        summaryData: payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useReducer } from \"react\";\r\nimport AppContext from \"./appContext\";\r\nimport appReducer from \"./appReducer\";\r\n\r\nconst AppState = (props) => {\r\n  const initialState = {\r\n    summaryData: null,\r\n  };\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n\r\n  const onDataSummary = () => {\r\n    fetch(\"https://api.covid19api.com/summary\", {\r\n      method: \"GET\",\r\n      redirect: \"follow\",\r\n    })\r\n      .then(async (response) => {\r\n        let res = await response.json();\r\n        dispatch({ type: \"LOAD_COVID19_COUNTRY_DATA\", payload: res });\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        summaryData: state.summaryData,\r\n        onDataSummary,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\nexport default AppState;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport AppContext from \"../context/appContext\";\r\nimport {\r\n  Grid,\r\n  Header,\r\n  Flag,\r\n  Label,\r\n  Segment,\r\n  Statistic,\r\n} from \"semantic-ui-react\";\r\n\r\nconst correctedNames = (name) =>\r\n  name === \"Taiwan, Republic of China\"\r\n    ? \"Taiwan\"\r\n    : name === \"Taiwan, Republic of China\"\r\n    ? \"Taiwan\"\r\n    : name === \"Tanzania, United Republic of\"\r\n    ? \"Tanzania\"\r\n    : name === \"Iran, Islamic Republic of\"\r\n    ? \"Iran\"\r\n    : name === \"Holy See (Vatican City State)\"\r\n    ? \"Vatican City\"\r\n    : name === \"Brunei Darussalam\"\r\n    ? \"Brunei\"\r\n    : name === \"Venezuela (Bolivarian Republic)\"\r\n    ? \"Venezuela\"\r\n    : name === \"Viet Nam\"\r\n    ? \"Vietnam\"\r\n    : name === \"Macedonia, Republic of\"\r\n    ? \"North Macedonia\"\r\n    : name;\r\n\r\nconst DataList = () => {\r\n  const state = useContext(AppContext);\r\n  const { summaryData, onDataSummary } = state;\r\n\r\n  useEffect(() => {\r\n    if (!summaryData) {\r\n      onDataSummary();\r\n    } else if (summaryData) {\r\n      console.log(\"Global Data\", summaryData);\r\n    }\r\n  }, [summaryData, onDataSummary]);\r\n\r\n  const isDataLoaded = () => (summaryData ? false : true);\r\n  return (\r\n    <div style={{ padding: 20 }}>\r\n      <Segment\r\n        color=\"brown\"\r\n        className=\"GlobalData\"\r\n        inverted\r\n        loading={isDataLoaded()}\r\n      >\r\n        <Header style={{ fontSize: \"6em\", color: \"black\" }}>\r\n          Gobal Covid-19 Statistics\r\n        </Header>\r\n        {summaryData && (\r\n          <Segment style={{ backgroundColor: \"#90BEC8\" }}>\r\n            <Grid centered style={{ padding: 15 }}>\r\n              <Grid.Row centered columns={5}>\r\n                {summaryData.Countries.map((i, k) => {\r\n                  const addComma = (num) =>\r\n                    num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n\r\n                  return (\r\n                    <Grid.Column key={k}>\r\n                      <Segment inverted style={{ marginBottom: 10 }}>\r\n                        <Label size=\"big\" attached=\"top\">\r\n                          {correctedNames(i.Country)}\r\n                          {i.CountryCode === \"XK\" ||\r\n                          i.CountryCode === \"SS\" ? null : (\r\n                            <Flag\r\n                              name={i.CountryCode.toLowerCase()}\r\n                              style={{ marginLeft: 20 }}\r\n                            />\r\n                          )}\r\n                        </Label>\r\n                        <div style={{ height: \"1vh\" }} />\r\n                        <Segment>\r\n                          <Statistic.Group size=\"small\" horizontal>\r\n                            <Statistic>\r\n                              <Statistic.Value>\r\n                                {addComma(i.TotalConfirmed)}\r\n                              </Statistic.Value>\r\n                              <Statistic.Label>Total Confirmed</Statistic.Label>\r\n                            </Statistic>\r\n                            <Statistic color=\"green\">\r\n                              <Statistic.Value>\r\n                                {addComma(i.TotalRecovered)}\r\n                              </Statistic.Value>\r\n                              <Statistic.Label>Total Recovered</Statistic.Label>\r\n                            </Statistic>\r\n                            <Statistic color=\"red\">\r\n                              <Statistic.Value>\r\n                                {addComma(i.TotalDeaths)}\r\n                              </Statistic.Value>\r\n                              <Statistic.Label>Total Deaths</Statistic.Label>\r\n                            </Statistic>\r\n                          </Statistic.Group>\r\n                        </Segment>\r\n                      </Segment>\r\n                    </Grid.Column>\r\n                  );\r\n                })}\r\n              </Grid.Row>\r\n            </Grid>\r\n          </Segment>\r\n        )}\r\n      </Segment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataList;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport AppState from \"./context/AppState\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport DataList from \"./components/DataList.js\";\n\nconst App = () => {\n  return (\n    <AppState>\n      <Scrollbars\n        style={{\n          width: \"100vw\",\n          height: \"100vh\",\n          backgroundColor: \"#C89A90\",\n        }}\n      >\n        <div className=\"App\">\n          <DataList />\n        </div>\n      </Scrollbars>\n    </AppState>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}