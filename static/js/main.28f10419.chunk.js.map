{"version":3,"sources":["context/appContext.js","context/appReducer.js","context/AppState.js","components/reusable/CountryItem.js","components/content/GlobalList.js","components/content/CountrySearch.js","components/content/SearchedCountry.js","components/CovidDataSearch.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","state","type","payload","summaryData","showGlobalList","countrySearch","AppState","props","useReducer","appReducer","dispatch","onDataSummary","fetch","method","redirect","then","response","a","json","res","catch","error","console","log","useEffect","Provider","value","onAllCountriesToggle","handleCountrySearch","name","children","CountryItem","country","countryCode","totalConfirmed","totalRecovered","totalDeaths","Segment","inverted","style","marginBottom","Label","size","attached","Flag","marginLeft","height","Statistic","Group","horizontal","Value","color","correctedNames","GlobalList","useContext","Grid","centered","padding","Row","columns","Countries","map","i","k","addComma","num","toString","replace","Column","key","Country","CountryCode","toLowerCase","TotalConfirmed","TotalRecovered","TotalDeaths","CountrySearch","useState","countryNames","setCountryNames","searchTerms","setSearchTerms","slugNames","Slug","Header","Input","action","placeholder","list","onChange","e","target","Button","onClick","id","SearchedCountry","setCountry","searchedCountry","filter","obj","CovidDataSearch","toggleAllCountries","setToggleAllCountries","className","loading","fontSize","toggle","active","prevState","backgroundColor","maxHeight","overflowY","App","display","justifyContent","rel","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.28f10419.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst AppContext = createContext();\r\n\r\nexport default AppContext;\r\n","export default (state, { type, payload }) => {\r\n  switch (type) {\r\n    case \"LOAD_COVID19_COUNTRY_DATA\":\r\n      return {\r\n        ...state,\r\n        summaryData: payload,\r\n      };\r\n\r\n    case \"TOGGLE_ALL_COUNTRIES\":\r\n      return {\r\n        ...state,\r\n        showGlobalList: !state.showGlobalList,\r\n      };\r\n\r\n    case \"UPDATE_COUNTRY_SEARCH\":\r\n      return {\r\n        ...state,\r\n        showGlobalList: false,\r\n        countrySearch: payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useReducer, useEffect } from \"react\";\r\nimport AppContext from \"./appContext\";\r\nimport appReducer from \"./appReducer\";\r\n\r\nconst AppState = (props) => {\r\n  const initialState = {\r\n    summaryData: null,\r\n    showGlobalList: false,\r\n    countrySearch: null,\r\n  };\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n  const { summaryData } = state;\r\n\r\n  const onDataSummary = () => {\r\n    fetch(\"https://api.covid19api.com/summary\", {\r\n      method: \"GET\",\r\n      redirect: \"follow\",\r\n    })\r\n      .then(async (response) => {\r\n        let res = await response.json();\r\n        dispatch({ type: \"LOAD_COVID19_COUNTRY_DATA\", payload: res });\r\n      })\r\n      .catch((error) => console.log(\"error\", error));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!summaryData) {\r\n      onDataSummary();\r\n    }\r\n  }, [summaryData]);\r\n\r\n  const onAllCountriesToggle = () => dispatch({ type: \"TOGGLE_ALL_COUNTRIES\" });\r\n\r\n  const handleCountrySearch = (name) =>\r\n    dispatch({ type: \"UPDATE_COUNTRY_SEARCH\", payload: name });\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        summaryData: state.summaryData,\r\n        showGlobalList: state.showGlobalList,\r\n        countrySearch: state.countrySearch,\r\n        onDataSummary,\r\n        onAllCountriesToggle,\r\n        handleCountrySearch,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\nexport default AppState;\r\n","import React from \"react\";\r\nimport { Flag, Label, Segment, Statistic } from \"semantic-ui-react\";\r\n\r\nconst CountryItem = ({\r\n  country,\r\n  countryCode,\r\n  totalConfirmed,\r\n  totalRecovered,\r\n  totalDeaths,\r\n}) => {\r\n  return (\r\n    <Segment inverted style={{ marginBottom: 10 }}>\r\n      <Label size=\"big\" attached=\"top\">\r\n        {country}\r\n        {countryCode === \"xk\" || countryCode === \"ss\" ? null : (\r\n          <Flag name={countryCode} style={{ marginLeft: 20 }} />\r\n        )}\r\n      </Label>\r\n      <div style={{ height: \"1vh\" }} />\r\n      <Segment>\r\n        <Statistic.Group size=\"small\" horizontal>\r\n          <Statistic>\r\n            <Statistic.Value>{totalConfirmed}</Statistic.Value>\r\n            <Statistic.Label>Total Confirmed</Statistic.Label>\r\n          </Statistic>\r\n          <Statistic color=\"green\">\r\n            <Statistic.Value>{totalRecovered}</Statistic.Value>\r\n            <Statistic.Label>Total Recovered</Statistic.Label>\r\n          </Statistic>\r\n          <Statistic color=\"red\">\r\n            <Statistic.Value>{totalDeaths}</Statistic.Value>\r\n            <Statistic.Label>Total Deaths</Statistic.Label>\r\n          </Statistic>\r\n        </Statistic.Group>\r\n      </Segment>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default CountryItem;\r\n","import React, { useContext } from \"react\";\r\nimport AppContext from \"../../context/appContext\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport CounrtyItem from \"../reusable/CountryItem\";\r\n\r\nconst GlobalList = () => {\r\n  const state = useContext(AppContext);\r\n  const { summaryData } = state;\r\n  return (\r\n    <Grid centered style={{ padding: 15 }}>\r\n      <Grid.Row centered columns={4}>\r\n        {summaryData.Countries.map((i, k) => {\r\n          const addComma = (num) =>\r\n            num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n\r\n          return (\r\n            <Grid.Column key={k}>\r\n              <CounrtyItem\r\n                country={correctedNames(i.Country)}\r\n                countryCode={i.CountryCode.toLowerCase()}\r\n                totalConfirmed={addComma(i.TotalConfirmed)}\r\n                totalRecovered={addComma(i.TotalRecovered)}\r\n                totalDeaths={addComma(i.TotalDeaths)}\r\n              />\r\n            </Grid.Column>\r\n          );\r\n        })}\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst correctedNames = (name) =>\r\n  name === \"Taiwan, Republic of China\"\r\n    ? \"Taiwan\"\r\n    : name === \"Taiwan, Republic of China\"\r\n    ? \"Taiwan\"\r\n    : name === \"Tanzania, United Republic of\"\r\n    ? \"Tanzania\"\r\n    : name === \"Iran, Islamic Republic of\"\r\n    ? \"Iran\"\r\n    : name === \"Holy See (Vatican City State)\"\r\n    ? \"Vatican City\"\r\n    : name === \"Brunei Darussalam\"\r\n    ? \"Brunei\"\r\n    : name === \"Venezuela (Bolivarian Republic)\"\r\n    ? \"Venezuela\"\r\n    : name === \"Viet Nam\"\r\n    ? \"Vietnam\"\r\n    : name === \"Macedonia, Republic of\"\r\n    ? \"North Macedonia\"\r\n    : name;\r\n\r\nexport default GlobalList;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Header, Input, Button } from \"semantic-ui-react\";\r\nimport AppContext from \"../../context/appContext\";\r\n\r\nconst CountrySearch = () => {\r\n  const state = useContext(AppContext);\r\n  const { summaryData, handleCountrySearch } = state;\r\n  const [countryNames, setCountryNames] = useState(null);\r\n  const [searchTerms, setSearchTerms] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (!countryNames) {\r\n      const slugNames = summaryData.Countries.map((i) => i.Slug);\r\n      setCountryNames(slugNames);\r\n    }\r\n  }, [summaryData, countryNames]);\r\n\r\n  return (\r\n    countryNames && (\r\n      <Header>\r\n        <Input action placeholder=\"Country Search...\">\r\n          <input\r\n            type=\"text\"\r\n            list=\"countries\"\r\n            onChange={(e) => setSearchTerms(e.target.value)}\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            onClick={() => handleCountrySearch(searchTerms)}\r\n          >\r\n            Search\r\n          </Button>\r\n        </Input>\r\n        <datalist id=\"countries\">\r\n          {countryNames.map((i, k) => (\r\n            <option key={k} value={`${i}`}>\r\n              {i}\r\n            </option>\r\n          ))}\r\n        </datalist>\r\n      </Header>\r\n    )\r\n  );\r\n};\r\n\r\nexport default CountrySearch;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport AppContext from \"../../context/appContext\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport CounrtyItem from \"../reusable/CountryItem\";\r\n\r\nconst SearchedCountry = () => {\r\n  const state = useContext(AppContext);\r\n  const { summaryData, countrySearch } = state;\r\n  const [country, setCountry] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (countrySearch) {\r\n      const searchedCountry = summaryData.Countries.filter((obj) => {\r\n        return obj.Slug === countrySearch;\r\n      });\r\n      setCountry(searchedCountry[0]);\r\n    }\r\n  }, [countrySearch, summaryData.Countries]);\r\n\r\n  return country ? (\r\n    <Grid centered style={{ padding: 15 }}>\r\n      <Grid.Column>\r\n        <CounrtyItem\r\n          country={correctedNames(country.Country)}\r\n          countryCode={country.CountryCode.toLowerCase()}\r\n          totalConfirmed={addComma(country.TotalConfirmed)}\r\n          totalRecovered={addComma(country.TotalRecovered)}\r\n          totalDeaths={addComma(country.TotalDeaths)}\r\n        />\r\n      </Grid.Column>\r\n    </Grid>\r\n  ) : null;\r\n};\r\n\r\nconst addComma = (num) => num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n\r\nconst correctedNames = (name) =>\r\n  name === \"Taiwan, Republic of China\"\r\n    ? \"Taiwan\"\r\n    : name === \"Taiwan, Republic of China\"\r\n    ? \"Taiwan\"\r\n    : name === \"Tanzania, United Republic of\"\r\n    ? \"Tanzania\"\r\n    : name === \"Iran, Islamic Republic of\"\r\n    ? \"Iran\"\r\n    : name === \"Holy See (Vatican City State)\"\r\n    ? \"Vatican City\"\r\n    : name === \"Brunei Darussalam\"\r\n    ? \"Brunei\"\r\n    : name === \"Venezuela (Bolivarian Republic)\"\r\n    ? \"Venezuela\"\r\n    : name === \"Viet Nam\"\r\n    ? \"Vietnam\"\r\n    : name === \"Macedonia, Republic of\"\r\n    ? \"North Macedonia\"\r\n    : name;\r\n\r\nexport default SearchedCountry;\r\n","import React, { useContext, useState } from \"react\";\r\nimport AppContext from \"../context/appContext\";\r\nimport { Header, Segment, Button } from \"semantic-ui-react\";\r\nimport GlobalList from \"./content/GlobalList\";\r\nimport CountrySearch from \"./content/CountrySearch\";\r\nimport SearchedCountry from \"./content/SearchedCountry\";\r\n\r\nconst CovidDataSearch = () => {\r\n  const state = useContext(AppContext);\r\n  const {\r\n    summaryData,\r\n    showGlobalList,\r\n    onAllCountriesToggle,\r\n    countrySearch,\r\n  } = state;\r\n  const [toggleAllCountries, setToggleAllCountries] = useState(false);\r\n\r\n  const isDataLoaded = () => (summaryData ? false : true);\r\n\r\n  const handleClick = () => {\r\n    setToggleAllCountries((prevState) => !prevState);\r\n    onAllCountriesToggle();\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"20px 20px 20px 20px \" }}>\r\n      <Segment\r\n        color=\"brown\"\r\n        className=\"GlobalData\"\r\n        inverted\r\n        loading={isDataLoaded()}\r\n      >\r\n        <Header style={{ fontSize: \"3em\" }}>Gobal Covid-19 Statistics</Header>\r\n        {summaryData && (\r\n          <>\r\n            <CountrySearch />\r\n\r\n            <Button\r\n              toggle\r\n              active={toggleAllCountries}\r\n              onClick={() => handleClick()}\r\n            >\r\n              All Countries\r\n            </Button>\r\n\r\n            {!showGlobalList && countrySearch && (\r\n              <Segment\r\n                style={{\r\n                  backgroundColor: \"#90BEC8\",\r\n                  maxHeight: \"60vh\",\r\n                  overflowY: \"scroll\",\r\n                  padding: 20,\r\n                }}\r\n              >\r\n                <SearchedCountry />\r\n              </Segment>\r\n            )}\r\n\r\n            {showGlobalList ? (\r\n              <Segment\r\n                style={{\r\n                  backgroundColor: \"#90BEC8\",\r\n                  maxHeight: \"60vh\",\r\n                  overflowY: \"scroll\",\r\n                  padding: 20,\r\n                }}\r\n              >\r\n                <GlobalList />\r\n              </Segment>\r\n            ) : null}\r\n          </>\r\n        )}\r\n      </Segment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CovidDataSearch;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport AppState from \"./context/AppState\";\nimport CovidDataSearch from \"./components/CovidDataSearch.js\";\n\nconst App = () => {\n  return (\n    <AppState>\n      <div className=\"App\">\n        <CovidDataSearch />\n\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-evenly\",\n          }}\n        >\n          <a\n            id=\"link\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/AhmedAlihashi/covid-19-tracker\"\n          >\n            Click here for the repository\n          </a>\n        </div>\n      </div>\n    </AppState>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}